# require 'simplecov'
# SimpleCov.start
# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper.rb"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration

# Use this gem to fake file interaction
# https://github.com/defunkt/fakefs/blob/master/test/fakefs_test.rb
require 'crx'
require 'pry'

$0 = "crx"
ARGV.clear

RSpec::Matchers.define :have_files do |expected|
  match do |actual|
    @included, @missing = [], []

    expected.each do |path|
      full_path = "#{actual}/#{path}"


      if File.exists?(full_path) 
        @included << path
      else
        @missing << path
      end
    end
    @missing.empty?
  end

  failure_message_for_should do |actual|
    "expected that #{actual} directory would include #{norm(@missing)}"
  end

  failure_message_for_should_not do |actual|
    "expected that #{actual} directory would not include #{norm(@included)}"
  end

  description do
    "includes #{norm(expected)} files"
  end

  def norm(array)
    array.join(', ')
  end

end

RSpec.configure do |config|
  config.treat_symbols_as_metadata_keys_with_true_values = true
  config.run_all_when_everything_filtered = true
  config.filter_run :focus
  config.filter_run_excluding :slow => true
end

def test_path
  File.dirname __FILE__
end

def fixture(name)
  File.read(path_to_fixture(name).to_s)
end

def path_to_fixture(name)
  Pathname.new("#{test_path}/fixtures/#{name}")
end

def capture(stream)
  begin
    stream = stream.to_s
    eval "$#{stream} = StringIO.new"
    yield
    result = eval("$#{stream}").string
  ensure
    eval("$#{stream} = #{stream.upcase}")
  end
  result
end

def in_temp_dir(&block)
  dir = Dir.mktmpdir
  Dir.chdir(dir, &block)
ensure
  FileUtils.rm_rf(dir)
end